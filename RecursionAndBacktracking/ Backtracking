# Backtracking

- What is backtracking?

Backtracking is a problem-solving algorithmic technique that involves finding a solution incrementally by trying different options and 
undoing them if they lead to a dead end.

- Basic terminologies

Candidate: A candidate is a potential choice or element that can be added to the current solution.
Solution: The solution is a valid and complete configuration that satisfies all problem constraints.
Partial Solution: A partial solution is an intermediate or incomplete configuration being constructed during the backtracking process.
Decision Space: The decision space is the set of all possible candidates or choices at each decision point.
Decision Point: A decision point is a specific step in the algorithm where a candidate is chosen and added to the partial solution.
Feasible Solution: A feasible solution is a partial or complete solution that adheres to all constraints.
Dead End: A dead end occurs when a partial solution cannot be extended without violating constraints.
Backtrack: Backtracking involves undoing previous decisions and returning to a prior decision point.
Search Space: The search space includes all possible combinations of candidates and choices.
Optimal Solution: In optimization problems, the optimal solution is the best possible solution.

- Types of backtracking problems

Decision Problems: Here, we search for a feasible solution.
Optimization Problems: For this type, we search for the best solution.
Enumeration Problems: We find set of all possible feasible solutions to the problems of this type.

- Determining backtracking problems

Generally every constraint satisfaction problem can be solved using backtracking but, 
Is it optimal to use backtracking every time? Turns out NO, 
there are a vast number of problem that can be solved using Greedy or Dynamic programming 
in logarithmic or polynomial time complexity which is far better than exponential complexity of Backtracking.

- Pseudocode for backtracking

void find_solutions(params):
    if (valid solution):
        store the solution
        return
    for (all choices):
        if (valid choice):
            apply(choice)
            find_solutions(params)
            backtrack(choice)
    return

- Complexity Analysis of Backtracking

Generally backtracking can be seen having below mentioned time complexities:
    Exponential (O(K^N))
    Factorial (O(N!))

- How backtracking is different from recursion

    a. recursion does not always need backtracking. 
        backtracking always uses recursion to solve problems
    b. recursion solve problems by breaking them into smaller, similiar subproblems and solving them recusively.
        batracking solves problems with multiple choices and exploring options systematically, backtracking when needed.
    c. recursion is controlled by function calls and call stack.
        backtracking is managed explicitly with loops and state.

- Must Do Backtracking Problems
    N-Queen Problem
    Solve Sudoku
    M-coloring problem
    Rat in a Maze
    The Knight’s tour problem
    Permutation of given String



回溯总结


- 回溯法解决的问题
    组合问题：N个数里面按一定规则找出k个数的集合
    切割问题：一个字符串按一定规则有几种切割方式
    子集问题：一个N个数的集合里有多少符合条件的子集
    排列问题：N个数按一定规则全排列，有几种排列方式
    棋盘问题：N皇后，解数独等等


- 如何理解回溯法
回溯法解决的问题都可以抽象为树形结构
因为回溯法解决的都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度，都构成的树的深度。

- 回溯法模版
    1. 回溯函数返回值以及参数
        void backtracking(参数)
    
    2. 回溯终止条件
        if (终止条件) {
            存放结果
            return
        }
    
    3. 回溯遍历过程
        for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小)） { 
            处理节点
            backtracking(路径，选择列表) //递归
            回溯，撤销处理结果
        }
        for 循环就是遍历集合区间，一个节点有多少孩子，这个for循环就执行多少次
        backtracking 自己调用自己，实现递归
        for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历
    
    4. 模版
        void backtracking(参数) {
            if (终止条件) {
                存放结果;
                return;
            }

            for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
                处理节点;
                backtracking(路径，选择列表); // 递归
                回溯，撤销处理结果
            }
        }